---
interface Props {
  particleCount?: number;
  particleSize?: { min: number; max: number };
  particleImage?: string;
}

const {
  particleCount = 30,
  particleSize = { min: 76, max: 80 },
  particleImage = "",
} = Astro.props;
---

<div class="particle-trigger">
  <slot />
</div>

<style>
  .particle-trigger {
    display: flex;
  }
</style>

<script define:vars={{ particleCount, particleSize, particleImage }}>
  class Particle {
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.size =
        Math.random() * (particleSize.max - particleSize.min) +
        particleSize.min;
      this.speedX = (Math.random() - 0.5) * 12;
      this.speedY = Math.random() * -15 - 5;
      this.gravity = 0.5;
      this.friction = 0.99;
      this.lifespan = 3000; // 3000ms = 3 seconds
      this.createdAt = Date.now();
      this.rotation = Math.random() * Math.PI * 2;
      this.rotationSpeed = (Math.random() - 0.5) * 0.2;
      this.isDead = false;
    }

    update() {
      this.speedY += this.gravity;
      this.x += this.speedX * this.friction;
      this.y += this.speedY;

      // Calculate life as a percentage based on elapsed time
      const age = Date.now() - this.createdAt;
      this.life = Math.max(0, 1 - age / this.lifespan);
      this.rotation += this.rotationSpeed;

      if (
        this.x + this.size > window.innerWidth * 2 ||
        this.x - this.size < 0
      ) {
        this.speedX *= -0.6;
      }

      if (this.y > window.innerHeight * 2 || age >= this.lifespan) {
        this.isDead = true;
      }
    }

    draw(ctx, image) {
      // Return early if particle is dead or life is 0
      if (this.isDead) return;

      ctx.save();
      ctx.globalAlpha = this.life;
      ctx.translate(this.x, this.y);
      ctx.rotate(this.rotation);
      ctx.drawImage(
        image,
        -this.size,
        -this.size,
        this.size * 2,
        this.size * 2
      );
      ctx.restore();
    }
  }

  function createParticleCanvas() {
    // Check if canvas already exists
    const existingCanvas = document.querySelector(".particle-canvas");
    if (existingCanvas) {
      return existingCanvas;
    }

    // Create new canvas
    const canvas = document.createElement("canvas");
    canvas.className = "particle-canvas";
    Object.assign(canvas.style, {
      position: "fixed",
      top: "0",
      left: "0",
      pointerEvents: "none",
      zIndex: "1",
      transformOrigin: "0 0",
      transform: "scale(0.5)",
    });

    document.body.appendChild(canvas);
    return canvas;
  }

  function initParticleSystem() {
    const canvas = createParticleCanvas();
    const ctx = canvas.getContext("2d");
    ctx.scale(2, 2);
    const triggerElements = document.querySelector(".particle-trigger");
    let particles = [];
    let animationId = null;
    const particleImg = new Image();
    particleImg.src = particleImage;

    function resizeCanvas() {
      canvas.width = window.innerWidth * 2;
      canvas.height = window.innerHeight * 2;
    }

    function createParticles(x, y) {
      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle(x * 2, y * 2));
      }

      if (!animationId) {
        animate();
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width * 2, canvas.height * 2);
      let activeParticles = false;

      for (let i = particles.length - 1; i >= 0; i--) {
        particles[i].update();

        if (!particles[i].isDead) {
          activeParticles = true;
          particles[i].draw(ctx, particleImg);
        }
      }

      particles = particles.filter((p) => !p.isDead);

      if (activeParticles) {
        animationId = requestAnimationFrame(animate);
      } else {
        animationId = null;
        particles = [];
        ctx.clearRect(0, 0, canvas.width * 2, canvas.height * 2);
      }
    }

    // Event Listeners
    window.addEventListener("resize", resizeCanvas);

    // Add click handlers to all trigger elements
    triggerElements.addEventListener("click", (e) => {
      const rect = e.target.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      createParticles(centerX, centerY);
    });

    // Initial setup
    resizeCanvas();
    particleImg.onload = resizeCanvas;

    // Cleanup function
    return () => {
      window.removeEventListener("resize", resizeCanvas);
      if (animationId) {
        cancelAnimationFrame(animationId);
      }
      // Remove the canvas on cleanup if needed
      if (canvas.parentNode) {
        canvas.parentNode.removeChild(canvas);
      }
    };
  }

  // Initialize when the DOM is ready
  let cleanup;

  const init = () => {
    if (cleanup) cleanup();
    cleanup = initParticleSystem();
  };

  document.addEventListener("astro:page-load", init);
  document.addEventListener("DOMContentLoaded", init);
</script>
