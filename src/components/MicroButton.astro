---
/**
 * MicroButton Component
 *
 * A versatile button component that can be rendered as a button, link, or label element.
 * Supports different intents (neutral, active, success), variants (primary, secondary, tertiary),
 * and can include an optional icon.
 *
 * Props:
 * - label: string - The text content of the button
 * - url: string (optional) - If provided, renders as an anchor tag with the specified URL
 * - className: string (optional) - Additional CSS classes to apply
 * - newWindow: boolean (default: true) - Whether to open links in a new window
 * - intent: "neutral" | "active" | "success" (default: "neutral") - The button's color scheme
 * - variant: "primary" | "secondary" | "tertiary" (default: "primary") - The button's style variant
 * - labelId: string (optional) - If provided, renders as a label element for the specified input
 * - icon: Component (optional) - An Astro component to render as an icon
 */

const {
  id = "",
  label,
  url = "",
  className = "",
  newWindow = false,
  intent = "neutral",
  variant = "primary",
  labelId = "",
  icon,
} = Astro.props;

let Element = "button" as any;

if (url.length) {
  Element = "a" as any;
}

if (labelId.length) {
  Element = "label" as any;
}

const Icon = icon ? icon : undefined;
---

<Element
  class:list={[
    "MicroButton",
    `_${intent}`,
    `_${variant}`,
    className,
    icon && !label && "_square",
  ]}
  id={id}
  {...url.length ? { href: url, target: newWindow ? "_blank" : "_self" } : {}}
  {...labelId.length ? { for: labelId } : {}}
>
  {Icon && <Icon />}
  {label}
</Element>

<style>
  ._neutral {
    --active-color: var(--color-white);
    --compliment-color: var(--color-black);
    --hover-compliment-color: var(--color-blue);
  }

  ._active {
    --active-color: var(--color-blue);
    --compliment-color: var(--color-white);
    --hover-compliment-color: var(--color-white);
  }

  ._success {
    --active-color: var(--color-green);
    --compliment-color: var(--color-black);
    --hover-compliment-color: var(--color-white);
  }

  .MicroButton {
    padding: 10px 14px;
    display: inline-flex;

    gap: 8px;
    font-family: "Roboto Mono", serif;
    font-size: 16px;
    font-weight: 500;
    line-height: 24px;

    text-align: center;
    border-radius: 4px;

    transition: all 200ms ease;

    user-select: none;
    justify-content: center;
    align-items: center;

    border-width: 2px;
    border-style: solid;
    text-wrap: nowrap;
    font-optical-sizing: auto;
    font-style: normal;
    letter-spacing: -0.03em;
  }

  .MicroButton._square {
    height: 60px;
    box-sizing: border-box;
    font-size: 0;
    line-height: 0;
    aspect-ratio: 1;
  }

  .MicroButton:active {
    transform: scale(0.95);
  }

  ._primary {
    color: var(--compliment-color);
    background-color: var(--active-color);
    border-color: var(--active-color);
  }
  ._secondary {
    color: var(--active-color);
    background-color: transparent;
    border-color: var(--active-color);
  }
  ._tertiary {
    color: var(--active-color);
    background-color: transparent;
    border-color: transparent;
  }

  @media (pointer: fine) {
    ._primary:hover {
      animation: blink-primary 400ms ease-in-out infinite;
    }
    ._secondary:hover {
      animation: blink-secondary 400ms ease-in-out infinite;
    }
    ._tertiary:hover {
      animation: blink-tertiary 400ms ease-in-out infinite;
    }
  }

  @keyframes blink-primary {
    0% {
      box-shadow: none;
    }
    50% {
      box-shadow: 0 0 16px var(--active-color);
    }
    100% {
      box-shadow: none;
    }
  }

  @keyframes blink-secondary {
    0% {
      box-shadow: none;
      text-shadow: none;
    }
    50% {
      box-shadow:
        0 0 16px var(--active-color),
        inset 0 0 16px var(--active-color);
      text-shadow: 0 0 8px var(--active-color);
      border-color: var(--hover-compliment-color);
      color: var(--hover-compliment-color);
    }
    100% {
      box-shadow: none;
      text-shadow: none;
    }
  }

  @keyframes blink-tertiary {
    0% {
      text-shadow: none;
    }
    50% {
      text-shadow: 0 0 8px var(--active-color);

      color: var(--hover-active-color);
    }
    100% {
      text-shadow: none;
    }
  }
</style>
