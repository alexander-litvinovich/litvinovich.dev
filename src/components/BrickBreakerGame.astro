---
import MicroButton from "@/components/MicroButton.astro";
---

<div class="BrickBreakerGame_container hidden">
  <div class="BrickBreakerGame_stats">
    <div class="BrickBreakerGame_score">
      Score: <span id="scoreValue">0</span>
    </div>
    <div class="BrickBreakerGame_lives">
      Lives: <span id="livesValue">3</span>
    </div>
  </div>
  <canvas id="gameCanvas"></canvas>
  <div class="BrickBreakerGame_buttonContainer">
    <MicroButton
      id="startButton"
      label="Play Game"
      intent="active"
      variant="primary"
    />
    <div class="BrickBreakerGame_hint">Press Space</div>
  </div>
</div>

<script>
  // Type definitions
  interface Paddle {
    width: number;
    height: number;
    x: number;
    y: number;
  }

  interface Ball {
    radius: number;
    x: number;
    y: number;
    dx: number;
    dy: number;
  }

  interface Brick {
    x: number;
    y: number;
    width: number;
    height: number;
    color: string;
    visible: boolean;
  }

  interface BrickConfig {
    rows: number;
    cols: number;
    padding: number;
    width: number;
    height: number;
    colors: string[];
    topPadding: number;
    bottomPadding: number;
  }

  interface GameSettings {
    // Ball settings
    ballRadius: number;
    ballSpeed: number;
    // Paddle settings
    paddleHeight: number;
    paddleWidthPercent: number;
    paddleSpeed: number;
    // Brick settings
    brickRows: number;
    brickHeight: number;
    brickPadding: number;
    brickWidthPercent: number;
    brickColors: string[];
    // Game settings
    lives: number;
    scorePerBrick: number;
    // Layout settings
    topPadding: number;
    bottomPadding: number;
  }

  class BrickBreakerGame {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    score: number;
    lives: number;
    gameStarted: boolean;
    gameLoopRunning: boolean;
    paddle: Paddle;
    ball: Ball;
    bricks: Brick[];
    brickConfig: BrickConfig;
    settings: GameSettings;

    constructor(settings: GameSettings) {
      this.settings = settings;
      // Wait for container to be visible before initializing
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.target.classList &&
            !mutation.target.classList.contains("hidden")
          ) {
            this.initGame();
            this.resizeCanvas();
            // Start the game loop immediately to show static elements
            if (!this.gameLoopRunning) {
              this.gameLoopRunning = true;
              this.gameLoop();
            }
            observer.disconnect();
          }
        });
      });

      const container = document.querySelector(".BrickBreakerGame_container");
      if (container) {
        observer.observe(container, { attributes: true });
      }

      // Add window resize listener
      window.addEventListener("resize", () => {
        if (!this.gameStarted) {
          this.resizeCanvas();
          // Redraw static elements after resize
          this.draw();
        }
      });
    }

    resizeCanvas() {
      if (!this.canvas) return;

      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;

      // Update paddle position
      this.paddle = {
        width: this.canvas.width * this.settings.paddleWidthPercent,
        height: this.settings.paddleHeight,
        x:
          this.canvas.width / 2 -
          (this.canvas.width * this.settings.paddleWidthPercent) / 2,
        y: this.canvas.height - 30 - this.settings.bottomPadding,
      };

      // Update ball position
      this.ball = {
        radius: this.settings.ballRadius,
        x: this.paddle.x + this.paddle.width / 2,
        y: this.paddle.y - this.settings.ballRadius,
        dx: this.ball?.dx ?? this.settings.ballSpeed,
        dy: this.ball?.dy ?? -this.settings.ballSpeed,
      };

      // Calculate brick width as percentage of paddle width
      const brickWidth = this.paddle.width * this.settings.brickWidthPercent;

      // Calculate maximum number of bricks that can fit horizontally
      const maxBricks = Math.floor(
        (this.canvas.width - this.settings.brickPadding * 2) /
          (brickWidth + this.settings.brickPadding)
      );

      // Update brick configuration
      this.brickConfig = {
        rows: this.settings.brickRows,
        cols: maxBricks,
        padding: this.settings.brickPadding,
        width: brickWidth,
        height: this.settings.brickHeight,
        colors: this.settings.brickColors,
        topPadding: this.settings.topPadding,
        bottomPadding: this.settings.bottomPadding,
      };

      // Reinitialize bricks
      this.initBricks();
    }

    initGame() {
      this.canvas = document.getElementById("gameCanvas") as HTMLCanvasElement;
      if (!this.canvas) return;

      this.ctx = this.canvas.getContext("2d") as CanvasRenderingContext2D;
      this.lives = this.settings.lives;
      this.score = 0;
      this.gameStarted = false;
      this.gameLoopRunning = false;

      // Initial canvas setup
      this.resizeCanvas();
      this.bindEvents();
      this.draw();
    }

    initBricks() {
      this.bricks = [];
      const totalWidth =
        this.brickConfig.cols *
          (this.brickConfig.width + this.brickConfig.padding) -
        this.brickConfig.padding;
      const startX = (this.canvas.width - totalWidth) / 2;

      for (let row = 0; row < this.brickConfig.rows; row++) {
        for (let col = 0; col < this.brickConfig.cols; col++) {
          const brick = {
            x:
              startX +
              col * (this.brickConfig.width + this.brickConfig.padding),
            y:
              row * (this.brickConfig.height + this.brickConfig.padding) +
              this.brickConfig.topPadding,
            width: this.brickConfig.width,
            height: this.brickConfig.height,
            color: this.brickConfig.colors[row],
            visible: true,
          };
          this.bricks.push(brick);
        }
      }
    }

    bindEvents() {
      // Space key to start/continue game
      document.addEventListener("keydown", (e) => {
        if (e.code === "Space" && !this.gameStarted) {
          this.startGame();
        }
      });

      // Escape key to close game
      document.addEventListener("keydown", (e) => {
        if (e.code === "Escape") {
          this.closeGame();
        }
      });

      // Start button click
      const startButton = document.getElementById("startButton");
      if (startButton) {
        startButton.addEventListener("click", () => {
          this.startGame();
        });
      }

      // Keyboard controls for paddle movement
      document.addEventListener("keydown", (e) => {
        if (!this.gameStarted) return;

        switch (e.key) {
          case "ArrowLeft":
            this.paddle.x = Math.max(
              0,
              this.paddle.x - this.settings.paddleSpeed
            );
            break;
          case "ArrowRight":
            this.paddle.x = Math.min(
              this.canvas.width - this.paddle.width,
              this.paddle.x + this.settings.paddleSpeed
            );
            break;
        }
      });

      // Touch events for paddle movement
      this.canvas.addEventListener("touchmove", (e) => {
        e.preventDefault();
        const touch = e.touches[0];
        const rect = this.canvas.getBoundingClientRect();
        const relativeX = touch.clientX - rect.left;

        if (relativeX > 0 && relativeX < this.canvas.width) {
          const newX = relativeX - this.paddle.width / 2;
          this.paddle.x = Math.max(
            0,
            Math.min(this.canvas.width - this.paddle.width, newX)
          );
        }
      });

      // Mouse events for desktop play
      this.canvas.addEventListener("mousemove", (e) => {
        const rect = this.canvas.getBoundingClientRect();
        const relativeX = e.clientX - rect.left;

        if (relativeX > 0 && relativeX < this.canvas.width) {
          const newX = relativeX - this.paddle.width / 2;
          this.paddle.x = Math.max(
            0,
            Math.min(this.canvas.width - this.paddle.width, newX)
          );
        }
      });
    }

    startGame() {
      const startButton = document.getElementById("startButton");
      const buttonContainer = document.querySelector(
        ".BrickBreakerGame_buttonContainer"
      ) as HTMLElement;
      if (startButton && buttonContainer) {
        startButton.style.display = "none";
        buttonContainer.style.display = "none";
        this.gameStarted = true;
      }
    }

    update() {
      // Ball movement
      this.ball.x += this.ball.dx;
      this.ball.y += this.ball.dy;

      // Wall collision
      if (
        this.ball.x + this.ball.radius > this.canvas.width ||
        this.ball.x - this.ball.radius < 0
      ) {
        this.ball.dx = -this.ball.dx;
      }
      if (this.ball.y - this.ball.radius < 0) {
        this.ball.dy = -this.ball.dy;
      }

      // Paddle collision
      if (
        this.ball.y + this.ball.radius > this.paddle.y &&
        this.ball.x > this.paddle.x &&
        this.ball.x < this.paddle.x + this.paddle.width &&
        this.ball.y < this.paddle.y + this.paddle.height
      ) {
        this.ball.dy = -this.ball.dy;

        // Add angle based on where the ball hits the paddle
        const hitPoint = (this.ball.x - this.paddle.x) / this.paddle.width;
        this.ball.dx = this.settings.ballSpeed * 1.6 * (hitPoint - 0.5);
      }

      // Brick collision
      this.bricks.forEach((brick) => {
        if (!brick.visible) return;

        // Calculate distances between ball and brick
        const ballLeft = this.ball.x - this.ball.radius;
        const ballRight = this.ball.x + this.ball.radius;
        const ballTop = this.ball.y - this.ball.radius;
        const ballBottom = this.ball.y + this.ball.radius;

        const brickLeft = brick.x;
        const brickRight = brick.x + brick.width;
        const brickTop = brick.y;
        const brickBottom = brick.y + brick.height;

        // Check collision
        if (
          ballRight > brickLeft &&
          ballLeft < brickRight &&
          ballBottom > brickTop &&
          ballTop < brickBottom
        ) {
          // Determine collision direction
          const fromBottom = Math.abs(ballTop - brickBottom);
          const fromTop = Math.abs(ballBottom - brickTop);
          const fromLeft = Math.abs(ballRight - brickLeft);
          const fromRight = Math.abs(ballLeft - brickRight);

          const min = Math.min(fromBottom, fromTop, fromLeft, fromRight);

          // Bounce in appropriate direction
          if (min === fromTop || min === fromBottom) {
            this.ball.dy = -this.ball.dy;
          } else {
            this.ball.dx = -this.ball.dx;
          }

          brick.visible = false;
          this.score += this.settings.scorePerBrick;
          document.getElementById("scoreValue").textContent =
            this.score.toString();

          // Check if all bricks are cleared
          if (this.bricks.every((b) => !b.visible)) {
            this.levelComplete();
          }
        }
      });

      // Game over
      if (this.ball.y + this.ball.radius > this.canvas.height) {
        this.lives--;
        document.getElementById("livesValue").textContent =
          this.lives.toString();

        if (this.lives <= 0) {
          this.gameStarted = false;
          const container = document.querySelector(
            ".BrickBreakerGame_container"
          );
          if (container) {
            container.classList.add("hidden");
          }
          // Reset everything for the next game
          this.reset();
          // Reset paddle width and ball speed that might have been modified in previous levels
          this.ball.dx = this.settings.ballSpeed;
          this.ball.dy = -this.settings.ballSpeed;
          this.paddle.width =
            this.canvas.width * this.settings.paddleWidthPercent;
        } else {
          this.gameStarted = false;
          const startButton = document.getElementById("startButton");
          const buttonContainer = document.querySelector(
            ".BrickBreakerGame_buttonContainer"
          ) as HTMLElement;
          if (startButton && buttonContainer) {
            startButton.style.display = "block";
            buttonContainer.style.display = "flex";
            startButton.textContent = "Continue";
          }
          // Reset ball position to follow paddle
          this.ball.x = this.paddle.x + this.paddle.width / 2;
          this.ball.y = this.paddle.y - this.settings.ballRadius;
          this.ball.dx = this.settings.ballSpeed;
          this.ball.dy = -this.settings.ballSpeed;
          this.paddle.x = this.canvas.width / 2 - this.paddle.width / 2;
        }
      }
    }

    levelComplete() {
      // Handle level completion
      this.gameStarted = false;
      const startButton = document.getElementById("startButton");
      const buttonContainer = document.querySelector(
        ".BrickBreakerGame_buttonContainer"
      ) as HTMLElement;
      if (startButton && buttonContainer) {
        startButton.style.display = "block";
        buttonContainer.style.display = "flex";
        startButton.textContent = "Play Again";
      }

      // Reset ball position to follow paddle
      this.ball.x = this.paddle.x + this.paddle.width / 2;
      this.ball.y = this.paddle.y - this.settings.ballRadius;
      this.paddle.x = this.canvas.width / 2 - this.paddle.width / 2;

      // Create new bricks
      this.initBricks();
    }

    reset() {
      this.score = 0;
      this.lives = this.settings.lives;
      const scoreElement = document.getElementById("scoreValue");
      const livesElement = document.getElementById("livesValue");

      if (scoreElement) {
        scoreElement.textContent = this.score.toString();
      }
      if (livesElement) {
        livesElement.textContent = this.lives.toString();
      }

      // Reset ball position to follow paddle
      this.ball.x = this.paddle.x + this.paddle.width / 2;
      this.ball.y = this.paddle.y - this.settings.ballRadius;
      this.ball.dx = this.settings.ballSpeed;
      this.ball.dy = -this.settings.ballSpeed;
      this.paddle.x = this.canvas.width / 2 - this.paddle.width / 2;
      this.initBricks();
    }

    draw() {
      // Clear canvas
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      // Draw paddle
      this.ctx.fillStyle = "#FFFFFF";
      this.ctx.fillRect(
        this.paddle.x,
        this.paddle.y,
        this.paddle.width,
        this.paddle.height
      );

      // Update ball position to follow paddle if game hasn't started
      if (!this.gameStarted) {
        this.ball.x = this.paddle.x + this.paddle.width / 2;
        this.ball.y = this.paddle.y - this.settings.ballRadius;
      }

      // Draw ball
      this.ctx.beginPath();
      this.ctx.arc(this.ball.x, this.ball.y, this.ball.radius, 0, Math.PI * 2);
      this.ctx.fillStyle = "#FFFFFF";
      this.ctx.fill();
      this.ctx.closePath();

      // Draw bricks
      this.bricks.forEach((brick) => {
        if (brick.visible) {
          this.ctx.fillStyle = brick.color;
          this.ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
        }
      });
    }

    gameLoop() {
      // Always draw, but only update if game is started
      this.draw();
      if (this.gameStarted) {
        this.update();
      }
      requestAnimationFrame(() => this.gameLoop());
    }

    closeGame() {
      this.gameStarted = false;
      const container = document.querySelector(".BrickBreakerGame_container");
      const buttonContainer = document.querySelector(
        ".BrickBreakerGame_buttonContainer"
      ) as HTMLElement;
      if (container && buttonContainer) {
        container.classList.add("hidden");
        buttonContainer.style.display = "flex";
      }
      // Reset game state
      this.reset();
      // Reset paddle width and ball speed
      this.ball.dx = this.settings.ballSpeed;
      this.ball.dy = -this.settings.ballSpeed;
      this.paddle.width = this.canvas.width * this.settings.paddleWidthPercent;
      // Reset button text
      const startButton = document.getElementById("startButton");
      if (startButton) {
        startButton.style.display = "block";
        startButton.textContent = "Play Game";
      }
      // Draw static elements one last time before hiding
      this.draw();
    }
  }

  // Initialize game when component is mounted
  document.addEventListener("DOMContentLoaded", () => {
    const defaultSettings: GameSettings = {
      // Ball settings
      ballRadius: 16,
      ballSpeed: 5,
      // Paddle settings
      paddleHeight: 24,
      paddleWidthPercent: 0.2,
      paddleSpeed: 15,
      // Brick settings
      brickRows: 5,
      brickHeight: 24,
      brickPadding: 8,
      brickWidthPercent: 0.7,
      brickColors: ["#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF"],
      // Game settings
      lives: 3,
      scorePerBrick: 10,
      // Layout settings
      topPadding: 64,
      bottomPadding: 40,
    };

    new BrickBreakerGame(defaultSettings);
  });
</script>

<style>
  .BrickBreakerGame_container {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  #gameCanvas {
    margin: 0 auto;
    width: 100%;
    height: 100%;
    display: block;
    background-color: var(--color-black-80);
  }

  .BrickBreakerGame_buttonContainer {
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: 10;
    transform: translate(-50%, -50%);
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .BrickBreakerGame_stats {
    position: absolute;
    top: 1rem;
    left: 1rem;
    right: 1rem;
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    font-size: 1.5rem;
    color: white;
    text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    justify-content: space-between;
  }

  .BrickBreakerGame_score,
  .BrickBreakerGame_lives {
    text-align: right;
  }

  .BrickBreakerGame_container.hidden {
    display: none;
  }

  .BrickBreakerGame_hint {
    margin-top: 1rem;
    text-align: center;
    color: white;
    font-family: "Roboto Mono", serif;
    font-size: 1rem;
    opacity: 0.7;
  }

  @media (pointer: coarse) {
    .BrickBreakerGame_hint {
      display: none;
    }
  }
</style>
