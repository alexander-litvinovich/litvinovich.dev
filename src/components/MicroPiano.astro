---
// Remove the Props interface and props destructuring since we're not using them anymore
---

<div class="MicroPiano">
  <div class="MicroPiano_controlPanel">
    <div class="MicroPiano_widget _machine">
      <div class="MicroPiano_value">404</div>
      <div class="MicroPiano_label">× Machine ×</div>
    </div>
    <div class="MicroPiano_widget _octave">
      <div class="MicroPiano_value">
        <button class="MicroPiano_octaveEdit _down">-</button>
        <div class="MicroPiano_octaveValue">3</div>
        <button class="MicroPiano_octaveEdit _up">+</button>
      </div>
      <div class="MicroPiano_label">Octave</div>
    </div>
    <div class="MicroPiano_widget _apr">
      <label class="MicroPiano_value">
        <input type="checkbox" class="_arpState" />
        <span class="MicroPiano_valueLabels">
          <span class="_on">ON</span>
          <span class="_off">OFF</span>
        </span>
      </label>
      <div class="MicroPiano_label">Arpeggio</div>
    </div>
    <div class="MicroPiano_widget _pads">
      <button class="MicroPiano_pad _kick">
        <span class="MicroPiano_label">Boom</span>
      </button>
      <button class="MicroPiano_pad _snare">
        <span class="MicroPiano_label">Bap</span>
      </button>
      <button class="MicroPiano_pad _clap">
        <span class="MicroPiano_label">Clap</span>
      </button>
    </div>
  </div>
  <div class="MicroPiano_keyboard">
    {
      Array.from({ length: 2 }, (_, i) => (
        <div class="MicroPiano_octave" data-octave={i}>
          <div class="MicroPiano_key" data-note="C">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key _black _cd" data-note="C#">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key" data-note="D">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key _black _dd" data-note="D#">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key" data-note="E">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key" data-note="F">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key _black _fd" data-note="F#">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key" data-note="G">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key _black _gd" data-note="G#">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key" data-note="A">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key _black _ad" data-note="A#">
            <div class="MicroPiano_shortcut" />
          </div>
          <div class="MicroPiano_key" data-note="B">
            <div class="MicroPiano_shortcut" />
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  interface NoteMapping {
    note: string;
    octaveOffset: number;
  }

  interface BaseNotes {
    [key: string]: number;
  }

  class Piano {
    // Audio-related properties
    private readonly audioContext: AudioContext;
    private readonly oscillators: Map<string, OscillatorNode>;
    private readonly baseNotes: BaseNotes;

    // UI Elements
    private readonly octaveDisplay: HTMLDivElement;
    private readonly keyElements: NodeListOf<Element>;
    private readonly drumPads: {
      kick: HTMLElement | null;
      snare: HTMLElement | null;
      clap: HTMLElement | null;
    };
    private readonly octaveControls: {
      up: HTMLElement | null;
      down: HTMLElement | null;
    };
    private readonly arpCheckbox: HTMLInputElement | null;

    // State
    private currentOctave: number;
    private isArpeggioEnabled: boolean;
    private readonly activeArpeggios: Set<string>;
    private readonly keyMap: Record<string, NoteMapping>;

    // Add new property to track active touches
    private readonly activeTouches: Map<number, Element>;

    // Constants
    private static readonly MIN_OCTAVE = 2;
    private static readonly MAX_OCTAVE = 6;
    private static readonly ARPEGGIO_INTERVAL = 200;
    private static readonly NOTE_SEQUENCE = [
      "C",
      "C#",
      "D",
      "D#",
      "E",
      "F",
      "F#",
      "G",
      "G#",
      "A",
      "A#",
      "B",
    ];

    constructor() {
      // Initialize audio context
      this.audioContext = new AudioContext();
      this.oscillators = new Map();

      // Initialize state
      this.currentOctave = 4;
      this.isArpeggioEnabled = false;
      this.activeArpeggios = new Set();

      // Cache DOM elements
      this.octaveDisplay = document.querySelector(".MicroPiano_octaveValue")!;
      this.keyElements = document.querySelectorAll(".MicroPiano_key");
      this.drumPads = {
        kick: document.querySelector(".MicroPiano_pad._kick"),
        snare: document.querySelector(".MicroPiano_pad._snare"),
        clap: document.querySelector(".MicroPiano_pad._clap"),
      };
      this.octaveControls = {
        up: document.querySelector(".MicroPiano_octaveEdit._up"),
        down: document.querySelector(".MicroPiano_octaveEdit._down"),
      };
      this.arpCheckbox = document.querySelector("._arpState");

      // Initialize base frequencies
      this.baseNotes = this.initializeBaseNotes();

      // Initialize keyboard mappings
      this.keyMap = this.initializeKeyMap();

      // Initialize all features
      this.initializeFeatures();

      // Initialize active touches
      this.activeTouches = new Map();
    }

    private initializeBaseNotes(): BaseNotes {
      return {
        C: 261.63,
        "C#": 277.18,
        D: 293.66,
        "D#": 311.13,
        E: 329.63,
        F: 349.23,
        "F#": 369.99,
        G: 392.0,
        "G#": 415.3,
        A: 440.0,
        "A#": 466.16,
        B: 493.88,
      };
    }

    private initializeFeatures(): void {
      this.initializePiano();
      this.initializeOctaveControls();
      this.updateShortcutLabels();
      this.initializeArpeggioControl();
      this.initializeDrumPads();
    }

    private noteToFrequency(note: string): number {
      const [noteName, octave] = note.split(/(\d+)/).filter(Boolean);
      const baseFreq = this.baseNotes[noteName];
      if (!baseFreq) return 440;

      return baseFreq * Math.pow(2, parseInt(octave) - 4);
    }

    private getMajorChordNotes(baseNote: string): string[] {
      const [noteName, octave] = baseNote.split(/(\d+)/).filter(Boolean);
      const octaveNum = parseInt(octave);
      const baseIndex = Piano.NOTE_SEQUENCE.indexOf(noteName);

      const getNote = (interval: number): string => {
        const noteIndex = (baseIndex + interval) % 12;
        const octaveOffset = Math.floor((baseIndex + interval) / 12);
        return `${Piano.NOTE_SEQUENCE[noteIndex]}${octaveNum + octaveOffset}`;
      };

      return [
        baseNote, // Root
        getNote(4), // Major third
        getNote(7), // Perfect fifth
      ];
    }

    private createOscillator(
      frequency: number,
      duration: number
    ): OscillatorNode {
      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.type = "sine";
      oscillator.frequency.setValueAtTime(
        frequency,
        this.audioContext.currentTime
      );

      gainNode.gain.setValueAtTime(0.5, this.audioContext.currentTime);
      gainNode.gain.setTargetAtTime(
        0,
        this.audioContext.currentTime + 0.1,
        0.2
      );

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      const stopTime = this.audioContext.currentTime + duration;
      oscillator.start();
      oscillator.stop(stopTime);

      // Cleanup
      setTimeout(() => {
        gainNode.disconnect();
        oscillator.disconnect();
      }, duration * 1000);

      return oscillator;
    }

    private playNote(note: string, duration = 1): void {
      const frequency = this.noteToFrequency(note);
      const oscillator = this.createOscillator(frequency, duration);
      this.oscillators.set(note, oscillator);
    }

    private playArpeggio(baseNote: string): void {
      if (this.activeArpeggios.has(baseNote)) return;

      const chordNotes = this.getMajorChordNotes(baseNote);
      let noteIndex = 0;

      const playNextNote = (): void => {
        if (!this.activeArpeggios.has(baseNote)) return;

        this.playNote(chordNotes[noteIndex], 0.3);
        noteIndex = (noteIndex + 1) % chordNotes.length;
        setTimeout(playNextNote, Piano.ARPEGGIO_INTERVAL);
      };

      this.activeArpeggios.add(baseNote);
      playNextNote();
    }

    private handleNoteStart(note: string): void {
      if (this.isArpeggioEnabled) {
        this.playArpeggio(note);
      } else {
        this.playNote(note);
      }
    }

    private handleNoteEnd(note: string): void {
      if (this.isArpeggioEnabled) {
        this.activeArpeggios.delete(note);
      }
    }

    private getNoteWithOctave(key: Element): string {
      const note = key.getAttribute("data-note");
      const octaveElement = key.closest(".MicroPiano_octave");
      if (!note || !octaveElement) return "";

      const octaveOffset = parseInt(
        octaveElement.getAttribute("data-octave") || "0"
      );
      return `${note}${this.currentOctave + octaveOffset}`;
    }

    private getKeyboardNoteWithOctave(keyMapping: {
      note: string;
      octaveOffset: number;
    }): string {
      return `${keyMapping.note}${this.currentOctave + keyMapping.octaveOffset}`;
    }

    private initializePiano() {
      this.keyElements.forEach((key) => {
        // Mouse events
        key.addEventListener("mousedown", () => {
          const noteWithOctave = this.getNoteWithOctave(key);
          if (noteWithOctave) {
            this.handleNoteStart(noteWithOctave);
            key.classList.add("active");
          }
        });

        key.addEventListener("mouseup", () => {
          const noteWithOctave = this.getNoteWithOctave(key);
          if (noteWithOctave) {
            this.handleNoteEnd(noteWithOctave);
          }
          key.classList.remove("active");
        });

        key.addEventListener("mouseleave", () => {
          const noteWithOctave = this.getNoteWithOctave(key);
          if (noteWithOctave) {
            this.handleNoteEnd(noteWithOctave);
          }
          key.classList.remove("active");
        });

        // Update touch events
        key.addEventListener("touchstart", ((e: TouchEvent) => {
          e.preventDefault();
          const touch = e.changedTouches[0];
          if (!touch) return;

          const noteWithOctave = this.getNoteWithOctave(key);
          if (noteWithOctave) {
            this.activeTouches.set(touch.identifier, key);
            this.handleNoteStart(noteWithOctave);
            key.classList.add("active");
          }
        }) as EventListener);

        key.addEventListener("touchend", ((e: TouchEvent) => {
          e.preventDefault();
          Array.from(e.changedTouches).forEach((touch) => {
            const touchedKey = this.activeTouches.get(touch.identifier);
            if (touchedKey) {
              const noteWithOctave = this.getNoteWithOctave(touchedKey);
              if (noteWithOctave) {
                this.handleNoteEnd(noteWithOctave);
              }
              touchedKey.classList.remove("active");
              this.activeTouches.delete(touch.identifier);
            }
          });
        }) as EventListener);

        key.addEventListener("touchcancel", ((e: TouchEvent) => {
          e.preventDefault();
          Array.from(e.changedTouches).forEach((touch) => {
            const touchedKey = this.activeTouches.get(touch.identifier);
            if (touchedKey) {
              const noteWithOctave = this.getNoteWithOctave(touchedKey);
              if (noteWithOctave) {
                this.handleNoteEnd(noteWithOctave);
              }
              touchedKey.classList.remove("active");
              this.activeTouches.delete(touch.identifier);
            }
          });
        }) as EventListener);
      });

      // Keyboard events
      document.addEventListener("keydown", (e) => {
        const keyMapping = this.keyMap[e.key.toLowerCase()];
        if (keyMapping && !e.repeat) {
          const noteWithOctave = this.getKeyboardNoteWithOctave(keyMapping);
          this.handleNoteStart(noteWithOctave);
          const key = document.querySelector(
            `.MicroPiano_octave[data-octave="${keyMapping.octaveOffset}"] [data-note="${keyMapping.note}"]`
          );
          key?.classList.add("active");
        }
      });

      document.addEventListener("keyup", (e) => {
        const keyMapping = this.keyMap[e.key.toLowerCase()];
        if (keyMapping) {
          const noteWithOctave = this.getKeyboardNoteWithOctave(keyMapping);
          this.handleNoteEnd(noteWithOctave);
          const key = document.querySelector(
            `.MicroPiano_octave[data-octave="${keyMapping.octaveOffset}"] [data-note="${keyMapping.note}"]`
          );
          key?.classList.remove("active");
        }
      });
    }

    private initializeKeyMap(): Record<string, NoteMapping> {
      return {
        /* lower octave */
        q: { note: "C", octaveOffset: 0 },
        2: { note: "C#", octaveOffset: 0 },
        w: { note: "D", octaveOffset: 0 },
        3: { note: "D#", octaveOffset: 0 },
        e: { note: "E", octaveOffset: 0 },
        r: { note: "F", octaveOffset: 0 },
        5: { note: "F#", octaveOffset: 0 },
        t: { note: "G", octaveOffset: 0 },
        6: { note: "G#", octaveOffset: 0 },
        y: { note: "A", octaveOffset: 0 },
        7: { note: "A#", octaveOffset: 0 },
        u: { note: "B", octaveOffset: 0 },
        /* higher octave */
        z: { note: "C", octaveOffset: 1 },
        s: { note: "C#", octaveOffset: 1 },
        x: { note: "D", octaveOffset: 1 },
        d: { note: "D#", octaveOffset: 1 },
        c: { note: "E", octaveOffset: 1 },
        v: { note: "F", octaveOffset: 1 },
        g: { note: "F#", octaveOffset: 1 },
        b: { note: "G", octaveOffset: 1 },
        h: { note: "G#", octaveOffset: 1 },
        n: { note: "A", octaveOffset: 1 },
        j: { note: "A#", octaveOffset: 1 },
        m: { note: "B", octaveOffset: 1 },
      };
    }

    private initializeOctaveControls() {
      const handleOctaveUp = () => {
        if (this.currentOctave < Piano.MAX_OCTAVE) {
          this.currentOctave++;
          this.updateOctaveDisplay();
        }
      };

      const handleOctaveDown = () => {
        if (this.currentOctave > Piano.MIN_OCTAVE) {
          this.currentOctave--;
          this.updateOctaveDisplay();
        }
      };

      // Mouse click handlers
      this.octaveControls.up?.addEventListener("click", handleOctaveUp);
      this.octaveControls.down?.addEventListener("click", handleOctaveDown);

      // Keyboard handlers
      document.addEventListener("keydown", (e) => {
        if (e.key === "=" || e.key === "+") {
          handleOctaveUp();
        } else if (e.key === "-" || e.key === "_") {
          handleOctaveDown();
        }
      });

      // Initialize display
      this.updateOctaveDisplay();
    }

    private updateOctaveDisplay() {
      if (this.octaveDisplay) {
        this.octaveDisplay.textContent = this.currentOctave.toString();
      }
    }

    private findKeyForNote(noteToFind: string, octaveOffset: number): string {
      for (const [key, mapping] of Object.entries(this.keyMap)) {
        if (
          mapping.note === noteToFind &&
          mapping.octaveOffset === octaveOffset
        ) {
          return key;
        }
      }
      return "";
    }

    private updateShortcutLabels() {
      const keys = document.querySelectorAll(".MicroPiano_key");
      keys.forEach((key) => {
        const note = key.getAttribute("data-note");
        const octaveElement = key.closest(".MicroPiano_octave");
        if (!note || !octaveElement) return;

        const octaveOffset = parseInt(
          octaveElement.getAttribute("data-octave") || "0"
        );

        const shortcut = this.findKeyForNote(note, octaveOffset);
        const shortcutElement = key.querySelector(".MicroPiano_shortcut");
        if (shortcutElement) {
          shortcutElement.textContent = shortcut;
        }
      });
    }

    private initializeArpeggioControl() {
      this.arpCheckbox?.addEventListener("change", (e) => {
        this.isArpeggioEnabled = (e.target as HTMLInputElement).checked;
        if (!this.isArpeggioEnabled) {
          this.activeArpeggios.clear();
        }
      });
    }

    private initializeDrumPads() {
      this.drumPads.kick?.addEventListener("click", () => this.playKick());
      this.drumPads.snare?.addEventListener("click", () => this.playSnare());
      this.drumPads.clap?.addEventListener("click", () => this.playClap());

      document.addEventListener("keydown", (e) => {
        if (e.repeat) return;

        switch (e.key.toLowerCase()) {
          case "8":
            this.playKick();
            this.drumPads.kick?.classList.add("active");
            break;
          case "9":
            this.playSnare();
            this.drumPads.snare?.classList.add("active");
            break;
          case "0":
            this.playClap();
            this.drumPads.clap?.classList.add("active");
            break;
        }
      });

      document.addEventListener("keyup", (e) => {
        switch (e.key.toLowerCase()) {
          case "8":
            this.drumPads.kick?.classList.remove("active");
            break;
          case "9":
            this.drumPads.snare?.classList.remove("active");
            break;
          case "0":
            this.drumPads.clap?.classList.remove("active");
            break;
        }
      });
    }

    private playKick() {
      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.frequency.setValueAtTime(150, this.audioContext.currentTime);
      oscillator.frequency.exponentialRampToValueAtTime(
        0.01,
        this.audioContext.currentTime + 0.5
      );

      gainNode.gain.setValueAtTime(1, this.audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(
        0.001,
        this.audioContext.currentTime + 0.5
      );

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + 0.5);

      // Cleanup
      setTimeout(() => {
        gainNode.disconnect();
        oscillator.disconnect();
      }, 500);
    }

    private playSnare() {
      const bufferSize = this.audioContext.sampleRate * 0.15;
      const buffer = this.audioContext.createBuffer(
        1,
        bufferSize,
        this.audioContext.sampleRate
      );
      const output = buffer.getChannelData(0);

      for (let i = 0; i < bufferSize; i++) {
        output[i] = Math.random() * 2 - 1;
      }

      const noise = this.audioContext.createBufferSource();
      const oscillator = this.audioContext.createOscillator();
      const noiseGain = this.audioContext.createGain();
      const oscillatorGain = this.audioContext.createGain();

      noise.buffer = buffer;
      oscillator.type = "triangle";
      oscillator.frequency.setValueAtTime(100, this.audioContext.currentTime);

      noiseGain.gain.setValueAtTime(1, this.audioContext.currentTime);
      oscillatorGain.gain.setValueAtTime(0.7, this.audioContext.currentTime);

      noiseGain.gain.exponentialRampToValueAtTime(
        0.01,
        this.audioContext.currentTime + 0.15
      );
      oscillatorGain.gain.exponentialRampToValueAtTime(
        0.01,
        this.audioContext.currentTime + 0.1
      );

      noise.connect(noiseGain);
      oscillator.connect(oscillatorGain);
      noiseGain.connect(this.audioContext.destination);
      oscillatorGain.connect(this.audioContext.destination);

      noise.start();
      oscillator.start();
      noise.stop(this.audioContext.currentTime + 0.15);
      oscillator.stop(this.audioContext.currentTime + 0.15);

      // Cleanup
      setTimeout(() => {
        noiseGain.disconnect();
        oscillatorGain.disconnect();
        noise.disconnect();
        oscillator.disconnect();
      }, 150);
    }

    private playClap() {
      const bufferSize = this.audioContext.sampleRate * 0.1;
      const buffer = this.audioContext.createBuffer(
        1,
        bufferSize,
        this.audioContext.sampleRate
      );
      const output = buffer.getChannelData(0);

      for (let i = 0; i < bufferSize; i++) {
        output[i] = Math.random() * 2 - 1;
      }

      const noise = this.audioContext.createBufferSource();
      const bandpass = this.audioContext.createBiquadFilter();
      const gainNode = this.audioContext.createGain();

      noise.buffer = buffer;
      bandpass.type = "bandpass";
      bandpass.frequency.value = 1000;
      bandpass.Q.value = 1.5;

      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(
        1,
        this.audioContext.currentTime + 0.02
      );
      gainNode.gain.exponentialRampToValueAtTime(
        0.01,
        this.audioContext.currentTime + 0.1
      );

      noise.connect(bandpass);
      bandpass.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      noise.start();
      noise.stop(this.audioContext.currentTime + 0.1);

      // Cleanup
      setTimeout(() => {
        gainNode.disconnect();
        bandpass.disconnect();
        noise.disconnect();
      }, 100);
    }

    cleanup(): void {
      // Stop all active arpeggios
      this.activeArpeggios.clear();

      // Disconnect all oscillators
      this.oscillators.forEach((oscillator) => {
        oscillator.disconnect();
      });
      this.oscillators.clear();

      // Close audio context
      this.audioContext.close();

      // Clear active touches
      this.activeTouches.clear();
    }
  }

  // Initialize piano when the component is mounted
  document.addEventListener("DOMContentLoaded", () => {
    const piano = new Piano();

    // Cleanup on page unload
    window.addEventListener("unload", () => {
      piano.cleanup();
    });
  });
</script>

<style>
  .MicroPiano {
    width: 600px;
    height: 240px;

    box-sizing: border-box;
    display: grid;

    overflow: hidden;

    background: var(--color-underpaper);
    border: 1px solid var(--color-white-20);
    border-radius: 8px 24px 8px 8px;
    user-select: none;
    grid-template-rows: 80px 160px;
    box-shadow: 8px 8px 0px var(--color-black-30);
  }

  .MicroPiano_keyboard {
    width: 100%;
    height: 100%;

    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0;
    border-top: 1px solid var(--color-white-20);
  }

  .MicroPiano_octave {
    position: relative;
    /* width: 100%; */
    height: 100%;
    display: flex;
  }

  .MicroPiano_shortcut {
    width: 24px;
    height: 24px;
    display: flex;
    font-size: 11px;

    font-weight: 400;
    line-height: 10px;
    text-align: center;
    color: var(--color-white-40);
    background-color: var(--color-black-50);

    border-radius: 4px;
    align-items: center;
    justify-content: center;
    text-transform: uppercase;
    letter-spacing: -0.021em;
  }

  .MicroPiano_key {
    --key-width: calc(100% / 7);
    position: relative;
    z-index: 1;

    padding-bottom: 12px;
    width: var(--key-width);
    height: 100%;
    /* margin-right: -1px; */

    box-sizing: border-box;

    display: flex;
    flex-direction: column;

    background: var(--color-underpaper);
    border-radius: 0;
    transition: background-color 0.1s;
    cursor: pointer;
    min-width: 40px;
    min-height: 80px;
    align-items: center;
    justify-content: end;
    border-color: var(--color-white-20);
    border-style: solid;
    border-width: 0;
    border-right-width: 1px;
  }
  .MicroPiano_octave:last-of-type .MicroPiano_key:last-of-type {
    border-right-width: 0;
  }

  .MicroPiano_key._black {
    position: absolute;
    z-index: 2;
    height: 50%;
    border-bottom-width: 1px;
    border-right-width: 1px;
    min-height: 40px;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  .MicroPiano_key._cd {
    left: calc(var(--key-width) - var(--key-width) / 2);
    border-left-width: 1px;
  }
  .MicroPiano_key._dd {
    left: calc(var(--key-width) * 2 - var(--key-width) / 2);
  }
  .MicroPiano_key._fd {
    left: calc(var(--key-width) * 4 - var(--key-width) / 2);
    border-left-width: 1px;
  }
  .MicroPiano_key._gd {
    left: calc(var(--key-width) * 5 - var(--key-width) / 2);
  }
  .MicroPiano_key._ad {
    left: calc(var(--key-width) * 6 - var(--key-width) / 2);
  }

  .MicroPiano_key.active {
    background: var(--color-green);
  }

  .MicroPiano_controlPanel {
    padding: 0 24px;
    height: 100%;
    display: flex;
    flex-direction: row;
    gap: 24px;
    align-items: center;
    justify-content: space-between;
  }

  .MicroPiano_widget {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  .MicroPiano_label {
    font-size: 11px;
    line-height: 10px;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: -0.021em;

    color: var(--color-white-20);
  }

  .MicroPiano_value {
    /* 404 */
    display: flex;
    flex-direction: row;
    font-size: 48px;
    font-weight: 100;
    line-height: 48px;
    text-align: center;
    color: var(--color-white-20);
    letter-spacing: -0.05em;
  }

  .MicroPiano_octaveEdit {
    color: inherit;
    background: none;
    border: none;
    font: inherit;
  }

  .MicroPiano_widget._apr ._arpState {
    display: none;
  }

  .MicroPiano_widget._apr .MicroPiano_valueLabels {
    width: 80px;
    text-align: center;
  }

  .MicroPiano_widget._apr ._on {
    display: none;
  }
  .MicroPiano_widget._apr ._off {
    display: initial;
  }

  .MicroPiano_widget._apr ._arpState:checked + .MicroPiano_valueLabels ._on {
    display: initial;
  }
  .MicroPiano_widget._apr ._arpState:checked + .MicroPiano_valueLabels ._off {
    display: none;
  }

  .MicroPiano_widget._pads {
    height: 100%;
    display: flex;
    flex-direction: row;
    gap: 8px;
    align-items: center;
    justify-content: center;
  }
  .MicroPiano_pad {
    width: 40px;
    height: 40px;
    display: flex;
    background: none;
    border: 1px solid var(--color-white-20);
    border-radius: 8px;
    transition: background-color 0.1s;
    cursor: pointer;
    align-items: center;
    justify-content: center;
  }

  .MicroPiano_pad:focus {
    outline: none;
  }

  .MicroPiano_pad.active,
  .MicroPiano_pad:active {
    background: var(--color-green);
  }
</style>
