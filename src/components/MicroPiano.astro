---
interface Props {
  startOctave?: number;
  octaveCount?: number;
}

const { startOctave = 4, octaveCount = 2 } = Astro.props;
---

<div class="MicroPiano">
  <div class="MicroPiano_controlPanel">
    <div class="MicroPiano_widget _machine">
      <div class="MicroPiano_value">404</div>
      <div class="MicroPiano_label">× Machine ×</div>
    </div>
    <div class="MicroPiano_widget _octave">
      <div class="MicroPiano_value">
        <button class="MicroPiano_octaveEdit _down">-</button>
        <div class="MicroPiano_octaveValue">3</div>
        <button class="MicroPiano_octaveEdit _up">+</button>
      </div>
      <div class="MicroPiano_label">Octave</div>
    </div>
    <div class="MicroPiano_widget _apr">
      <label class="MicroPiano_value">
        <input type="checkbox" class="_arpState" />
        <span class="MicroPiano_valueLabels">
          <span class="_on">ON</span>
          <span class="_off">OFF</span>
        </span>
      </label>
      <div class="MicroPiano_label">Arpeggio</div>
    </div>
    <div class="MicroPiano_widget _pads">
      <button class="MicroPiano_pad _kick">
        <span class="MicroPiano_label">Boom</span>
      </button>
      <button class="MicroPiano_pad _snare">
        <span class="MicroPiano_label">Bap</span>
      </button>
      <button class="MicroPiano_pad _clap">
        <span class="MicroPiano_label">Clap</span>
      </button>
    </div>
  </div>
  <div class="MicroPiano_keyboard">
    {
      Array.from({ length: octaveCount }, (_, i) => (
        <div class="MicroPiano_octave">
          <div class="MicroPiano_key" data-note={`C${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div
            class="MicroPiano_key _black _cd"
            data-note={`C#${startOctave + i}`}
          >
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div class="MicroPiano_key" data-note={`D${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div
            class="MicroPiano_key _black _dd"
            data-note={`D#${startOctave + i}`}
          >
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div class="MicroPiano_key" data-note={`E${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div class="MicroPiano_key" data-note={`F${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div
            class="MicroPiano_key _black _fd"
            data-note={`F#${startOctave + i}`}
          >
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div class="MicroPiano_key" data-note={`G${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div
            class="MicroPiano_key _black _gd"
            data-note={`G#${startOctave + i}`}
          >
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div class="MicroPiano_key" data-note={`A${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div
            class="MicroPiano_key _black _ad"
            data-note={`A#${startOctave + i}`}
          >
            <div class="MicroPiano_shortcut">f</div>
          </div>
          <div class="MicroPiano_key" data-note={`B${startOctave + i}`}>
            <div class="MicroPiano_shortcut">f</div>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  class Piano {
    private audioContext: AudioContext;
    private oscillators: Map<string, OscillatorNode>;
    private keyMap: { [key: string]: string };

    constructor() {
      this.audioContext = new AudioContext();
      this.oscillators = new Map();
      this.keyMap = {
        a: "C4",
        w: "C#4",
        s: "D4",
        e: "D#4",
        d: "E4",
        f: "F4",
        t: "F#4",
        g: "G4",
        y: "G#4",
        h: "A4",
        u: "A#4",
        j: "B4",
        k: "C5",
        o: "C#5",
        l: "D5",
        p: "D#5",
        ";": "E5",
        "'": "F5",
        "]": "F#5",
        "\\": "G5",
      };
      this.initializePiano();
    }

    private noteToFrequency(note: string): number {
      const notes = {
        C4: 261.63,
        "C#4": 277.18,
        D4: 293.66,
        "D#4": 311.13,
        E4: 329.63,
        F4: 349.23,
        "F#4": 369.99,
        G4: 392.0,
        "G#4": 415.3,
        A4: 440.0,
        "A#4": 466.16,
        B4: 493.88,
        C5: 523.25,
        "C#5": 554.37,
        D5: 587.33,
        "D#5": 622.25,
        E5: 659.25,
        F5: 698.46,
        "F#5": 739.99,
        G5: 783.99,
        "G#5": 830.61,
        A5: 880.0,
        "A#5": 932.33,
        B5: 987.77,
      };
      return notes[note] || 440;
    }

    private playNote(note: string) {
      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.type = "sine";
      oscillator.frequency.setValueAtTime(
        this.noteToFrequency(note),
        this.audioContext.currentTime
      );

      gainNode.gain.setValueAtTime(0.5, this.audioContext.currentTime);
      gainNode.gain.setTargetAtTime(
        0,
        this.audioContext.currentTime + 0.1,
        0.2
      );

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      oscillator.start();
      oscillator.stop(this.audioContext.currentTime + 1);

      this.oscillators.set(note, oscillator);
    }

    private initializePiano() {
      const keys = document.querySelectorAll(".MicroPiano_key");

      keys.forEach((key) => {
        // Mouse events
        key.addEventListener("mousedown", () => {
          const note = key.getAttribute("data-note");
          if (note) {
            this.playNote(note);
            key.classList.add("active");
          }
        });

        key.addEventListener("mouseup", () => {
          key.classList.remove("active");
        });

        key.addEventListener("mouseleave", () => {
          key.classList.remove("active");
        });

        // Touch events
        key.addEventListener("touchstart", (e) => {
          e.preventDefault();
          const note = key.getAttribute("data-note");
          if (note) {
            this.playNote(note);
            key.classList.add("active");
          }
        });

        key.addEventListener("touchend", () => {
          key.classList.remove("active");
        });
      });

      // Add keyboard events
      document.addEventListener("keydown", (e) => {
        const note = this.keyMap[e.key.toLowerCase()];
        if (note) {
          // Prevent repeating when key is held
          if (!e.repeat) {
            this.playNote(note);
            // Highlight the corresponding key
            const key = document.querySelector(`[data-note="${note}"]`);
            key?.classList.add("active");
          }
        }
      });

      document.addEventListener("keyup", (e) => {
        const note = this.keyMap[e.key.toLowerCase()];
        if (note) {
          const key = document.querySelector(`[data-note="${note}"]`);
          key?.classList.remove("active");
        }
      });
    }
  }

  // Initialize piano when the component is mounted
  document.addEventListener("DOMContentLoaded", () => {
    new Piano();
  });
</script>

<style>
  .MicroPiano {
    display: grid;
    grid-template-rows: 80px 160px;

    box-sizing: border-box;

    width: 600px;
    height: 240px;

    background: var(--color-underpaper);
    border: 1px solid var(--color-white-20);
    box-shadow: 8px 8px 0px var(--color-black-30);
    border-radius: 8px 24px 8px 8px;

    overflow: hidden;
    user-select: none;
  }

  .MicroPiano_keyboard {
    width: 100%;
    height: 100%;

    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0;
    border-top: 1px solid var(--color-white-20);
  }

  .MicroPiano_octave {
    /* width: 100%; */
    height: 100%;
    position: relative;
    display: flex;
  }

  .MicroPiano_shortcut {
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;

    font-weight: 400;
    font-size: 11px;
    line-height: 10px;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: -0.021em;
    background-color: var(--color-black-50);
    color: var(--color-white-40);

    border-radius: 4px;
  }

  .MicroPiano_key {
    --key-width: calc(100% / 7);
    width: var(--key-width);
    height: 100%;
    min-width: 40px;
    min-height: 80px;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: end;

    padding-bottom: 12px;

    background: var(--color-underpaper);
    border-color: var(--color-white-20);
    border-style: solid;
    border-width: 0;
    border-right-width: 1px;
    border-radius: 0;
    cursor: pointer;
    position: relative;
    z-index: 1;
    transition: background-color 0.1s;
    /* margin-right: -1px; */

    box-sizing: border-box;
  }
  .MicroPiano_octave:last-of-type .MicroPiano_key:last-of-type {
    border-right-width: 0;
  }

  .MicroPiano_key._black {
    border-bottom-width: 1px;
    border-right-width: 1px;
    height: 50%;
    min-height: 40px;
    position: absolute;
    z-index: 2;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  .MicroPiano_key._cd {
    left: calc(var(--key-width) - var(--key-width) / 2);
    border-left-width: 1px;
  }
  .MicroPiano_key._dd {
    left: calc(var(--key-width) * 2 - var(--key-width) / 2);
  }
  .MicroPiano_key._fd {
    left: calc(var(--key-width) * 4 - var(--key-width) / 2);
    border-left-width: 1px;
  }
  .MicroPiano_key._gd {
    left: calc(var(--key-width) * 5 - var(--key-width) / 2);
  }
  .MicroPiano_key._ad {
    left: calc(var(--key-width) * 6 - var(--key-width) / 2);
  }

  .MicroPiano_key.active {
    background: var(--color-green);
  }

  .MicroPiano_controlPanel {
    display: flex;
    flex-direction: row;
    gap: 24px;
    align-items: center;
    justify-content: space-between;
    padding: 0 24px;
    height: 100%;
  }

  .MicroPiano_widget {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  .MicroPiano_label {
    font-size: 11px;
    line-height: 10px;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: -0.021em;

    color: var(--color-white-20);
  }

  .MicroPiano_value {
    /* 404 */
    display: flex;
    flex-direction: row;
    font-weight: 100;
    font-size: 48px;
    line-height: 48px;
    text-align: center;
    letter-spacing: -0.05em;
    color: var(--color-white-20);
  }

  .MicroPiano_octaveEdit {
    background: none;
    border: none;
    font: inherit;
    color: inherit;
  }

  .MicroPiano_widget._apr ._arpState {
    display: none;
  }

  .MicroPiano_widget._apr .MicroPiano_valueLabels {
    width: 80px;
    text-align: center;
  }

  .MicroPiano_widget._apr ._on {
    display: none;
  }
  .MicroPiano_widget._apr ._off {
    display: initial;
  }

  .MicroPiano_widget._apr ._arpState:checked + .MicroPiano_valueLabels ._on {
    display: initial;
  }
  .MicroPiano_widget._apr ._arpState:checked + .MicroPiano_valueLabels ._off {
    display: none;
  }

  .MicroPiano_widget._pads {
    display: flex;
    flex-direction: row;
    gap: 8px;
    height: 100%;
    align-items: center;
    justify-content: center;
  }
  .MicroPiano_pad {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    border: 1px solid var(--color-white-20);
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
  }
</style>
