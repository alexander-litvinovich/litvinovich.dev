---
// src/pages/game.astro
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=no"
    />
    <title>Touch Arkanoid</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        overflow: hidden;
        background: #1a1a1a;
        touch-action: none;
      }

      #gameCanvas {
        margin: 0 auto;
        display: block;
        background: #000;
        touch-action: none;
      }

      .game-container {
        position: relative;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .start-btn {
        position: absolute;
        top: 50%;
        left: 50%;
        z-index: 10;
        padding: 1rem 2rem;
        font-size: 1.5rem;
        color: white;
        background: #4caf50;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transform: translate(-50%, -50%);
      }

      .score {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-family: Arial, sans-serif;
        font-size: 1.5rem;
        color: white;
      }
    </style>
  </head>
  <body>
    <div class="game-container">
      <div class="score">Score: <span id="scoreValue">0</span></div>
      <canvas id="gameCanvas"></canvas>
      <button class="start-btn" id="startButton">Start Game</button>
    </div>

    <script>
      class ArkanoidGame {
        constructor() {
          this.canvas = document.getElementById("gameCanvas");
          this.ctx = this.canvas.getContext("2d");
          this.score = 0;
          this.gameStarted = false;

          // Set canvas size based on viewport
          this.canvas.width = Math.min(800, window.innerWidth * 0.95);
          this.canvas.height = window.innerHeight * 0.8;

          // Game objects
          this.paddle = {
            width: this.canvas.width * 0.15,
            height: 20,
            x: this.canvas.width / 2,
            y: this.canvas.height - 30,
          };

          this.ball = {
            radius: 8,
            x: this.canvas.width / 2,
            y: this.canvas.height - 50,
            dx: 5,
            dy: -5,
          };

          // Create bricks
          this.bricks = [];
          this.brickConfig = {
            rows: 5,
            cols: 8,
            padding: 10,
            width: (this.canvas.width - 100) / 8,
            height: 20,
            colors: ["#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF"],
          };

          this.initBricks();
          this.bindEvents();
        }

        initBricks() {
          for (let row = 0; row < this.brickConfig.rows; row++) {
            for (let col = 0; col < this.brickConfig.cols; col++) {
              const brick = {
                x:
                  col * (this.brickConfig.width + this.brickConfig.padding) +
                  50,
                y:
                  row * (this.brickConfig.height + this.brickConfig.padding) +
                  50,
                width: this.brickConfig.width,
                height: this.brickConfig.height,
                color: this.brickConfig.colors[row],
                visible: true,
              };
              this.bricks.push(brick);
            }
          }
        }

        bindEvents() {
          // Touch events for paddle movement
          this.canvas.addEventListener("touchmove", (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = this.canvas.getBoundingClientRect();
            const relativeX = touch.clientX - rect.left;

            if (relativeX > 0 && relativeX < this.canvas.width) {
              this.paddle.x = relativeX - this.paddle.width / 2;
            }
          });

          // Start button
          document
            .getElementById("startButton")
            .addEventListener("click", () => {
              this.gameStarted = true;
              document.getElementById("startButton").style.display = "none";
              this.gameLoop();
            });
        }

        update() {
          // Ball movement
          this.ball.x += this.ball.dx;
          this.ball.y += this.ball.dy;

          // Wall collision
          if (
            this.ball.x + this.ball.radius > this.canvas.width ||
            this.ball.x - this.ball.radius < 0
          ) {
            this.ball.dx = -this.ball.dx;
          }
          if (this.ball.y - this.ball.radius < 0) {
            this.ball.dy = -this.ball.dy;
          }

          // Paddle collision
          if (
            this.ball.y + this.ball.radius > this.paddle.y &&
            this.ball.x > this.paddle.x &&
            this.ball.x < this.paddle.x + this.paddle.width
          ) {
            this.ball.dy = -this.ball.dy;

            // Add angle based on where the ball hits the paddle
            const hitPoint = (this.ball.x - this.paddle.x) / this.paddle.width;
            this.ball.dx = 8 * (hitPoint - 0.5);
          }

          // Brick collision
          this.bricks.forEach((brick) => {
            if (
              brick.visible &&
              this.ball.x > brick.x &&
              this.ball.x < brick.x + brick.width &&
              this.ball.y > brick.y &&
              this.ball.y < brick.y + brick.height
            ) {
              brick.visible = false;
              this.ball.dy = -this.ball.dy;
              this.score += 10;
              document.getElementById("scoreValue").textContent = this.score;
            }
          });

          // Game over
          if (this.ball.y + this.ball.radius > this.canvas.height) {
            this.gameStarted = false;
            document.getElementById("startButton").style.display = "block";
            document.getElementById("startButton").textContent = "Try Again";
            this.reset();
          }
        }

        reset() {
          this.score = 0;
          document.getElementById("scoreValue").textContent = this.score;
          this.ball.x = this.canvas.width / 2;
          this.ball.y = this.canvas.height - 50;
          this.ball.dx = 5;
          this.ball.dy = -5;
          this.paddle.x = this.canvas.width / 2 - this.paddle.width / 2;
          this.initBricks();
        }

        draw() {
          // Clear canvas
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

          // Draw paddle
          this.ctx.fillStyle = "#FFFFFF";
          this.ctx.fillRect(
            this.paddle.x,
            this.paddle.y,
            this.paddle.width,
            this.paddle.height
          );

          // Draw ball
          this.ctx.beginPath();
          this.ctx.arc(
            this.ball.x,
            this.ball.y,
            this.ball.radius,
            0,
            Math.PI * 2
          );
          this.ctx.fillStyle = "#FFFFFF";
          this.ctx.fill();
          this.ctx.closePath();

          // Draw bricks
          this.bricks.forEach((brick) => {
            if (brick.visible) {
              this.ctx.fillStyle = brick.color;
              this.ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
            }
          });
        }

        gameLoop() {
          if (this.gameStarted) {
            this.update();
            this.draw();
            requestAnimationFrame(() => this.gameLoop());
          }
        }
      }

      // Initialize game when page loads
      window.addEventListener("load", () => {
        new ArkanoidGame();
      });
    </script>
  </body>
</html>
